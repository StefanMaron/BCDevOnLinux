#!/bin/bash

set -e

echo "Starting BC Server..."
echo "Script running with PID: $$"
echo "Current working directory: $(pwd)"

# Historical Note:
# This script previously had multiple variants (workaround and final-fix) to handle
# Wine culture/locale issues that caused BC to fail with "'en-US' is not a valid language code".
# These workarounds are no longer needed since we now use a custom Wine build with locale fixes.
# The old scripts are preserved in legacy/culture-workarounds/ for reference.

# Set Wine environment variables following BC4Ubuntu methodology
export WINEPREFIX="$HOME/.local/share/wineprefixes/bc1"
export WINEARCH=win64
export DISPLAY=":0"
export WINE_SKIP_GECKO_INSTALLATION=1
export WINE_SKIP_MONO_INSTALLATION=1

# Standard locale settings (no special workarounds needed with custom Wine)
export LANG=en_US.UTF-8
export LANGUAGE=en_US:en
export LC_ALL=en_US.UTF-8

# Ensure virtual display is running
if ! pgrep -f "Xvfb :0" > /dev/null; then
    echo "Starting Xvfb for Wine..."
    # Clean up any stale lock files first
    rm -f /tmp/.X0-lock /tmp/.X11-unix/X0 2>/dev/null || true
    Xvfb :0 -screen 0 1024x768x24 -ac +extension GLX &
    sleep 2
else
    echo "Xvfb already running"
fi

# Check if Wine prefix exists and is properly initialized
if [ ! -d "$WINEPREFIX" ] || [ ! -f "$WINEPREFIX/system.reg" ]; then
    echo "Wine prefix not found or corrupted, initializing..."
    /home/init-wine.sh
else
    echo "Wine prefix found at: $WINEPREFIX"
fi

# Find BC Server executable
BCSERVER_PATH=$(find /home/bcartifacts -name "Microsoft.Dynamics.Nav.Server.exe" -type f | head -1)
if [ -z "$BCSERVER_PATH" ]; then
    echo "ERROR: BC Server not found in /home/bcartifacts"
    find /home/bcartifacts -name "*.exe" -type f | head -10
    exit 1
fi

echo "Found BC Server at: $BCSERVER_PATH"

# Database setup (enhanced with proper restoration)
echo "Setting up database..."

# First, restore database if backup exists
DB_BAK=$(find /home/bcartifacts -name "*.bak" -type f | head -1)
if [ -n "$DB_BAK" ]; then
    echo "Found database backup: $DB_BAK"
    echo "Restoring database from backup..."
    
    # Run database restoration script
    echo "Executing restore-database.sh..."
    /home/restore-database.sh
    RESTORE_EXIT_CODE=$?
    echo "restore-database.sh completed with exit code: $RESTORE_EXIT_CODE"
    
    if [ $RESTORE_EXIT_CODE -eq 0 ]; then
        echo "✅ Database restored successfully"
        DB_RESTORED=true
    else
        echo "❌ Database restoration failed with exit code $RESTORE_EXIT_CODE"
        exit 1
    fi
else
    echo "No database backup found, assuming database already exists"
    DB_RESTORED=false
fi

echo "Database setup completed, continuing with encryption setup..."

# Temporarily disable exit on error for debugging
set +e

# Source enhanced encryption functions for RSA and AES support
echo "Loading encryption functions..."
if [ -f "/home/bc-rsa-encryption-functions.sh" ]; then
    echo "Found encryption functions file"
    source /home/bc-rsa-encryption-functions.sh
    SOURCE_EXIT_CODE=$?
    echo "source command completed with exit code: $SOURCE_EXIT_CODE"
    if [ $SOURCE_EXIT_CODE -eq 0 ]; then
        echo "✅ Encryption functions loaded successfully"
    else
        echo "❌ Failed to load encryption functions with exit code: $SOURCE_EXIT_CODE"
        exit 1
    fi
else
    echo "❌ Encryption functions file not found: /home/bc-rsa-encryption-functions.sh"
    exit 1
fi

# Re-enable exit on error
set -e

# Check for existing encryption key and determine type (key should be generated by entrypoint.sh)
echo "Checking for encryption key..."
if [ ! -f "/home/bcserver/Keys/bc.key" ]; then
    echo "ERROR: No encryption key found. This should have been generated during container initialization."
    echo "Please check the entrypoint.sh encryption setup."
    exit 1
fi

echo "Detecting encryption key type..."
echo "Key file path: /home/bcserver/Keys/bc.key"
echo "Key file exists: $([ -f "/home/bcserver/Keys/bc.key" ] && echo "YES" || echo "NO")"
if [ -f "/home/bcserver/Keys/bc.key" ]; then
    echo "Key file size: $(stat -c%s "/home/bcserver/Keys/bc.key" 2>/dev/null || echo "unknown") bytes"
    echo "Key file first line: $(head -n 1 "/home/bcserver/Keys/bc.key" 2>/dev/null | head -c 50)..."
fi

echo "Calling bc_detect_key_type function..."
# Temporarily disable exit on error for the detection
set +e
KEY_TYPE=$(bc_detect_key_type "/home/bcserver/Keys/bc.key" 2>&1)
DETECT_EXIT_CODE=$?
set -e
echo "bc_detect_key_type completed with exit code: $DETECT_EXIT_CODE"
echo "Encryption key status: $KEY_TYPE"

case "$KEY_TYPE" in
    "RSA")
        echo "Using RSA encryption key with LocalKeyFile provider"
        ENCRYPTION_MODE="RSA"
        ;;
    "LEGACY_RSA")
        echo "Found legacy RSA encryption key format"
        echo "⚠️  WARNING: Legacy RSA key format detected. This format is no longer supported."
        echo "🔄 Regenerating RSA key in BC-compatible XML format..."
        
        # Backup the old key
        cp "/home/bcserver/Keys/bc.key" "/home/bcserver/Keys/bc.key.legacy.backup"
        
        # Generate new RSA key in XML format
        if command -v pwsh &> /dev/null; then
            if pwsh -File "/home/create-rsa-encryption-key.ps1" -KeyPath "/home/bcserver/Keys/bc.key" -Force; then
                echo "✅ New RSA key generated successfully"
                ENCRYPTION_MODE="RSA"
                # Re-detect to confirm
                KEY_TYPE="RSA"
            else
                echo "❌ Failed to generate new RSA key"
                # Restore backup and fall back to legacy handling
                cp "/home/bcserver/Keys/bc.key.legacy.backup" "/home/bcserver/Keys/bc.key"
                echo "⚠️  Using legacy RSA key (limited functionality)"
                ENCRYPTION_MODE="LEGACY_RSA"
            fi
        else
            echo "❌ PowerShell not available for key regeneration"
            echo "⚠️  Using legacy RSA key (limited functionality)"
            ENCRYPTION_MODE="LEGACY_RSA"
        fi
        ;;
    "AES")
        echo "Using AES encryption key (compatibility mode)"
        ENCRYPTION_MODE="AES"
        ;;
    *)
        echo "ERROR: Unknown or invalid encryption key type: $KEY_TYPE"
        echo "🔄 Attempting to generate new RSA key..."
        
        # Try to generate a new RSA key
        if command -v pwsh &> /dev/null; then
            if pwsh -File "/home/create-rsa-encryption-key.ps1" -KeyPath "/home/bcserver/Keys/bc.key" -Force; then
                echo "✅ New RSA key generated successfully"
                ENCRYPTION_MODE="RSA"
            else
                echo "❌ Failed to generate RSA key, exiting"
                exit 1
            fi
        else
            echo "❌ PowerShell not available and no valid key found"
            exit 1
        fi
        ;;
esac

# NOTE: BC Server encryption modes:
# 1. RSA + LocalKeyFile provider: BC handles encryption internally, more secure
# 2. AES + manual encryption: We encrypt passwords, less integrated but works

# Create CustomSettings.config from the template file
if [ -f "/home/CustomSettings.config" ]; then
    echo "Creating CustomSettings.config from template file..."
    
    # Use appropriate encryption method based on key type
    if [ "$ENCRYPTION_MODE" = "RSA" ]; then
        echo "Configuring for RSA encryption with LocalKeyFile provider..."
        
        # For RSA encryption, BC handles password protection internally
        sed "s/\${SA_PASSWORD}/$SA_PASSWORD/g" /home/CustomSettings.config > /home/bcserver/CustomSettings.config
        
        # Configure for RSA LocalKeyFile provider
        bc_update_config_rsa "/home/bcserver/CustomSettings.config" "$SA_PASSWORD" "/home/bcserver/Keys/bc.key"
        
        echo "CustomSettings.config configured for RSA encryption"
        
    elif [ "$ENCRYPTION_MODE" = "AES" ]; then
        echo "Configuring for AES encryption (compatibility mode)..."
        
        # For AES encryption, we handle password encryption manually
        if ENCRYPTED_PASSWORD=$(bc_encrypt_password "$SA_PASSWORD" "/home/bcserver/Keys/bc.key"); then
            echo "Password encrypted successfully with AES key"
            
            # Create config with encrypted password
            sed "s/\${SA_PASSWORD}/$SA_PASSWORD/g" /home/CustomSettings.config > /home/bcserver/CustomSettings.config
            
            # Update with encrypted password
            bc_update_config_password "/home/bcserver/CustomSettings.config" "$SA_PASSWORD" "/home/bcserver/Keys/bc.key"
            
            echo "CustomSettings.config configured for AES encryption"
        else
            echo "WARNING: Failed to encrypt password, using plain text"
            sed "s/\${SA_PASSWORD}/$SA_PASSWORD/g" /home/CustomSettings.config > /home/bcserver/CustomSettings.config
        fi
    else
        echo "WARNING: Unknown encryption mode, using plain password"
        sed "s/\${SA_PASSWORD}/$SA_PASSWORD/g" /home/CustomSettings.config > /home/bcserver/CustomSettings.config
    fi
    
    # Also copy to the BC Server directory to override the default
    BCSERVER_DIR=$(dirname "$BCSERVER_PATH")
    cp /home/bcserver/CustomSettings.config "$BCSERVER_DIR/CustomSettings.config"
    echo "Copied CustomSettings.config to BC Server directory"
else
    echo "WARNING: CustomSettings.config template not found at /home/CustomSettings.config"
    # Remove any problematic settings from the default config
    BCSERVER_DIR=$(dirname "$BCSERVER_PATH")
    if [ -f "$BCSERVER_DIR/CustomSettings.config" ]; then
        echo "Fixing default CustomSettings.config..."
        # Remove UnsupportedLanguageIds which can cause issues
        sed -i '/<add key="UnsupportedLanguageIds"/d' "$BCSERVER_DIR/CustomSettings.config"
        echo "Removed UnsupportedLanguageIds from default config"
    fi
fi

# Copy configuration and key files to Wine prefix and proper system directories
echo "Copying configuration files to Wine prefix..."
BCSERVER_DIR=$(dirname "$BCSERVER_PATH")
WINE_BC_DIR="$BCSERVER_DIR"

# Create proper Windows system directory structure for BC Server keys
BC_VERSION=$(basename "$(dirname "$(dirname "$BCSERVER_PATH")")" 2>/dev/null || echo "260")
BC_KEYS_DIR="$WINEPREFIX/drive_c/ProgramData/Microsoft/Microsoft Dynamics NAV/$BC_VERSION/Server/Keys"
mkdir -p "$BC_KEYS_DIR"

echo "BC Server version detected: $BC_VERSION"
echo "Keys directory: $BC_KEYS_DIR"

if [ -f "/home/bcserver/CustomSettings.config" ]; then
    cp "/home/bcserver/CustomSettings.config" "$WINE_BC_DIR/"
    echo "✅ CustomSettings.config copied to BC Server directory"
fi

if [ -f "/home/bcserver/Keys/bc.key" ]; then
    # Copy to BC Server directory as Secret.key (legacy compatibility)
    cp "/home/bcserver/Keys/bc.key" "$WINE_BC_DIR/Secret.key"
    
    # Copy to bcserver/Keys folder with correct BC version naming
    cp "/home/bcserver/Keys/bc.key" "/home/bcserver/Keys/BC.key"
    
    # Copy to proper Windows system directory with correct BC version naming
    cp "/home/bcserver/Keys/bc.key" "$BC_KEYS_DIR/BC.key"
    
    echo "✅ Encryption key copied to all required locations:"
    echo "   - BC Server directory: $WINE_BC_DIR/Secret.key"
    echo "   - BC Server keys folder: /home/bcserver/Keys/BC.key"
    echo "   - System keys directory: $BC_KEYS_DIR/BC.key"
    
    # Import RSA key to database if it's an RSA key and database was restored
    if [ "$ENCRYPTION_MODE" = "RSA" ] && [ "$DB_RESTORED" = "true" ]; then
        echo "Importing RSA encryption key to database..."
        if /home/import-encryption-key-to-db.sh \
            --server-instance "BC" \
            --database-server "sql" \
            --database-name "${DATABASE_NAME:-CRONUS}" \
            --key-file "/home/bcserver/Keys/bc.key" \
            --password-file "/home/bcserver/Keys/bc-key-password.txt"; then
            echo "✅ RSA key imported to database table dbo.\$ndo\$publicencryptionkey"
        else
            echo "⚠️  RSA key import to database failed (BC Server will still work with file-based encryption)"
        fi
    fi
else
    echo "WARNING: Encryption key not found"
fi

# Verify Wine environment
echo "Wine environment:"
echo "  WINEPREFIX: $WINEPREFIX"
echo "  WINEARCH: $WINEARCH"
wine --version

# Change to BC Server directory
cd "$BCSERVER_DIR"

# Start BC Server with Wine
echo "Starting BC Server with Wine..."
echo "Command: wine $BCSERVER_PATH /console"
echo ""

# Execute BC Server
# The custom Wine build handles all locale/culture issues internally
exec wine "$BCSERVER_PATH" /console